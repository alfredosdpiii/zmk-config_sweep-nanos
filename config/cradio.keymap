// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

#define DEF 0
#define SYM 1
#define NAV 2
#define MOU 3
#define HYPER LG(LA(LS(LCTRL)))

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 10>;
            require-prior-idle-ms = <200>;
        };
        left_hand_tab {
            bindings = <&kp TAB>;
            key-positions = <1 11>;
            require-prior-idle-ms = <200>;
        };
        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <3 13>;
            require-prior-idle-ms = <200>;
        };
        left_hand_backspace {
            bindings = <&kp BSPC>;
            key-positions = <4 14>;
            require-prior-idle-ms = <200>;
        };
        toggle_mouse_layer_combo {
            key-positions = <23 30>;
            bindings = <&tog MOU>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  Q       │  W       │  E       │  R       │  T       │   │  Y       │  U       │  I       │  O       │  P       │
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  A       │  S       │  D       │  F       │  G       │   │  H       │  J       │  K       │  L       │ ; :      │
            &mt LGUI A &mt LALT S &mt LCTRL D &mt LSHFT F &kp G        &kp H      &mt RSHFT J &mt RCTRL K &mt RALT L &mt RGUI SEMI
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  Z       │  X       │  C       │  V       │  B       │   │  N       │  M       │ , <      │ . >      │ ' "      │
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &kp COMMA  &kp DOT    &kp SQT
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                            &kp SPACE  &mo HRM        &mo NUM    &kp ENTER
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        symbol_row {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  1       │  2       │  3       │  4       │  5       │   │  6       │  7       │  8       │  9       │ BSPC     │
            &kp N1     &kp N2     &kp N3     &kp N4     &kp N5         &kp N6     &kp N7     &kp N8     &kp N9     &kp BSPC
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  ~       │  0       │  (       │  [       │  {       │   │  -       │  _       │  \       │  |       │  ;       │
            &kp TILDE  &kp N0     &kp LPAR   &kp LBKT   &kp LBRC       &kp MINUS  &kp UNDER  &kp BSLH   &kp PIPE   &kp SEMI
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  `       │  /       │  )       │  ]       │  }       │   │  +       │  =       │  ,       │  .       │  /       │
            &kp GRAVE  &kp FSLH   &kp RPAR   &kp RBKT   &kp RBRC       &kp PLUS   &kp EQUAL  &kp COMMA  &kp DOT    &kp FSLH
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &trans         &kp LSHFT  &kp TAB
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        nav {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  ESC     │          │          │          │ CAPSWORD │   │          │          │          │          │ BSPC     │
            &kp ESC    &none      &none      &none      &caps_word     &none      &none      &none      &none      &kp BSPC
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ BT_SEL 0 │ BT_SEL 1 │ BT_SEL 2 │ BT_SEL 3 │ BT_SEL 4 │   │ LEFT     │ DOWN     │ UP       │ RIGHT    │          │
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│ BT_CLR   │ BT_CLR   │          │          │          │   │          │ PG_DN    │ PG_UP    │  .       │  :       │
            &bt BT_CLR &bt BT_CLR &none      &none      &none          &none      &kp PG_DN  &kp PG_UP  &kp DOT    &kp COLON
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &mkp LCLK  &kp TAB        &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        mouse {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  ESC     │ LC(UP)   │ LC(TAB)  │ LC(TAB)  │ BSPC     │   │SCRL_DOWN │SCRL_RIGHT│MOVE_UP   │SCRL_LEFT │ BSPC     │
            &kp ESC    &kp LC(UP)  &kp LC(TAB) &kp LC(TAB) &kp BSPC   &msc SCRL_DOWN &msc SCRL_RIGHT &mmv MOVE_UP &msc SCRL_LEFT &kp BSPC
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  LCTRL   │  LALT    │  LSHFT   │  LGUI    │ ENTER    │   │SCRL_UP   │MOVE_LEFT │MOVE_DOWN │MOVE_RIGHT│ ENTER    │
            &kp LCTRL  &kp LALT    &kp LSHFT   &kp LGUI   &kp ENTER   &msc SCRL_UP &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp ENTER
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  LG(Z)   │  LG(X)   │  LG(C)   │  LG(V)   │ SPACE    │   │          │          │ LC(LEFT) │ LC(RIGHT)│ RCLICK   │
            &kp LG(Z)  &kp LG(X)   &kp LG(C)   &kp LG(V)  &kp SPACE   &none       &none       &kp LC(LEFT) &kp LC(RIGHT) &mkp RCLK
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &tog MOU   &tog MOU       &mkp LCLK  &mkp RCLK
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
    };
};
