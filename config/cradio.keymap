#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define HRM 1
#define NUM 2
#define NAV 3
#define SYM 4
#define FUN 5
#define MOU 6
#define AOE 7
#define AGS 8
#define ABS 9
#define HYPER LG(LA(LS(LCTRL)))

&sk {
    quick-release;// Avoids "THis" problem (double capitalization)
    release-after-ms = <86400000>;// Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&mt { flavor = "balanced"; };

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT SQT CARET TILDE GRAVE>;// separators + K_CANCEL for &lc macro + LSHFT for PT-BR diacriticals. This makes RSHFT a better thumb key that will &caps_word.
    /delete-property/ ignore-modifiers;
};

&num_word {
    continue-list = <LPAR RPAR LBKT RBKT LBRC RBRC TAB DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL BACKSPACE DEL>;
    ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 10>;
            require-prior-idle-ms = <200>;
        };

        left_hand_tab {
            bindings = <&kp TAB>;
            key-positions = <1 11>;
            require-prior-idle-ms = <200>;
        };

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <3 13>;
            require-prior-idle-ms = <200>;
        };

        left_hand_backspace {
            bindings = <&kp BSPC>;
            key-positions = <4 14>;
            require-prior-idle-ms = <200>;
        };

        toggle_mouse_layer_combo {
            key-positions = <23 30>;
            bindings = <&tog 3>;
        };
    };

    behaviors {
        ml: home-row-mods-left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
            hold-trigger-on-release;
        };

        mr: home-row-mods-right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };

        blt: balanced_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&lc>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";

            // hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>; // thumbs + right keys

            hold-trigger-on-release;
        };

        playnp: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        shft_cw: shft_cw {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";// requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            ignored-key-positions = <7 9 16 17 18 19 29>;// Arrows and BSPC, ENTER and DEL
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_with_home_row_mods {
            bindings = <
&kp Q       &kp W       &kp E        &kp R             &kp T    &kp Y  &kp U             &kp I        &kp O           &kp P
&ml LGUI A  &ml LALT S  &ml LCTRL D  &ml LEFT_SHIFT F  &kp G    &kp H  &mr LEFT_SHIFT J  &mr LCTRL K  &mr LEFT_ALT L  &mr LGUI SEMICOLON
&kp Z       &kp X       &kp C        &kp V             &kp B    &kp N  &kp M             &kp COMMA    &kp DOT         &kp SINGLE_QUOTE
                                     &kp SPACE         &mo 1    &mo 2  &kp ENTER
            >;
        };

        symbol_row {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3           &kp NUMBER_4       &kp N5             &kp NUMBER_6    &kp N7          &kp N8         &kp N9    &kp BACKSPACE
&kp TILDE     &kp N0         &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp LEFT_BRACE     &kp MINUS       &kp UNDERSCORE  &kp BACKSLASH  &kp PIPE  &kp SEMICOLON
&kp GRAVE     &kp LS(SLASH)  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE    &kp PLUS        &kp EQUAL       &kp COMMA      &kp DOT   &kp SLASH
                                                    &trans             &trans             &kp LEFT_SHIFT  &kp TAB
            >;
        };

        numpad {
            bindings = <
&kp ESCAPE    &trans          &trans        &trans        &caps_word      &trans    &trans         &trans       &trans     &kp BACKSPACE
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans
&bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &trans    &kp PAGE_DOWN  &kp PAGE_UP  &kp DOT    &kp COLON
                                            &mkp MB1      &kp TAB         &trans    &trans
            >;
        };

        mouse {
            bindings = <
&kp ESC          &kp LC(UP)  &kp LS(LC(TAB))  &kp LC(TAB)  &kp BSPC     &msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &kp BSPC
&kp LCTRL        &kp LALT    &kp LSHFT        &kp LCMD     &kp ENTER    &msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp ENTER
&mt GLOBE LG(Z)  &kp LG(X)   &kp LG(C)        &kp LG(V)    &kp SPACE    &kp F18         &m_hr            &kp LC(LEFT)    &kp LC(RIGHT)    &mkp MB3
                                              &tog 3       &tog 3       &mkp MB1        &mkp MB2
            >;
        };
    };
};
